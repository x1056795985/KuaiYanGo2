package utils

import (
	"bytes"
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"strings"
)

func Y易源码替换APi接口并修复(易源码 []byte, APi接口列表 []string, 加密盐 string) []byte {
	if len(加密盐) == 0 {
		return 易源码
	}

	局_易源码字节集 := 易源码
	for _, api := range APi接口列表 {
		hash := md5.Sum([]byte(api + 加密盐))
		局_ApiMd5 := []byte(hex.EncodeToString(hash[:]))
		局_字节集1 := 转换字节集并补齐32位(api)
		局_易源码字节集 = bytes.Replace(局_易源码字节集, 局_字节集1, 局_ApiMd5, 1)
	}
	//E.E写到文件("E:\\yun\\xuhaonan\\project\\TY通用后台管理系统\\对接HttpApi\\飞鸟快验对接源码APi加密盐"+加密盐+"易修复.e", 局_易源码字节集)

	/*	局_字节集头, _ := hex.DecodeString("71000000511b")
		//局_开始 := bytes.Index(局_易源码字节集, 局_字节集头) - 4         //{0,0,0,0}   bytes.Index 有坑不能用,会寻找不到
		局_开始 := 寻找字节集(局_易源码字节集, 局_字节集头) - 4               //{0,0,0,0}
		局_结束 := 寻找字节集(局_易源码字节集, 局_字节集尾) + len(局_字节集尾) + 5 //{0,0,0,0,0} 正常7009 长度  Info.DataLength 值
		if 局_开始 < 0 {
			局_开始 = 511
		}*/
	局_开始 := 511
	局_结束 := 7009
	if len(局_易源码字节集) < 局_开始+局_结束 {
		return []byte{}
	}

	局_待校验字节集 := 局_易源码字节集[局_开始 : 局_开始+局_结束]
	
	fmt.Printf("1校验data结果:" + strings.ToUpper(hex.EncodeToString(局_待校验字节集)) + "\n")
	局_第一个程序资源段校验 := GetCheckValue(局_待校验字节集)
	fmt.Printf("1校验值结果:" + strings.ToUpper(hex.EncodeToString(局_第一个程序资源段校验)) + "\n")
	局_易源码字节集[459] = 局_第一个程序资源段校验[0]
	局_易源码字节集[460] = 局_第一个程序资源段校验[1]
	局_易源码字节集[461] = 局_第一个程序资源段校验[2]
	局_易源码字节集[462] = 局_第一个程序资源段校验[3]

	局_待校验字节集 = 局_易源码字节集[415 : 415+92]
	//19730004C0CCD4EBA4CAD0ADC5CE041973000419730004197300041973000419730000000300000000000000EC3413D8611B000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	fmt.Printf("2校验data结果:" + strings.ToUpper(hex.EncodeToString(局_待校验字节集)) + "\n")
	局_第二个程序资源段校验 := GetCheckValue(局_待校验字节集)
	fmt.Printf("2校验值结果:" + strings.ToUpper(hex.EncodeToString(局_第二个程序资源段校验)) + "\n")
	局_易源码字节集[411] = 局_第二个程序资源段校验[0]
	局_易源码字节集[412] = 局_第二个程序资源段校验[1]
	局_易源码字节集[413] = 局_第二个程序资源段校验[2]
	局_易源码字节集[414] = 局_第二个程序资源段校验[3]
	return 局_易源码字节集
}

func 转换字节集并补齐32位(文本 string) []byte {

	转换后字节集 := []byte(文本)
	返回 := make([]byte, 32)
	copy(返回, 转换后字节集)
	for i := len(转换后字节集); i < 32; i++ {
		返回[i] = 0x20
	}
	return 返回
}

func 寻找字节集(原始字节集 []byte, 欲寻找的字节集 []byte) int {
	局_位置 := -1
	if len(欲寻找的字节集) == 0 {
		return 局_位置
	}
	局_长度 := len(欲寻找的字节集)
	for i := 0; i < (len(原始字节集) - 局_长度); i++ {
		if 原始字节集[i] == 欲寻找的字节集[0] {
			for a := 0; a < 局_长度; a++ {
				if 原始字节集[i+a] != 欲寻找的字节集[a] {
					break
				}
				if a == 局_长度 {
					局_位置 = i
				}
			}

			if 局_位置 != -1 {
				break
			}

		}
	}

	return 局_位置
}

// 校验值
func GetCheckValue(data []byte) []byte {
	keyLen := 4
	key := make([]byte, keyLen)
	dataLen := len(data)
	i := 0

	for i < dataLen {
		key[i%keyLen] ^= data[i]
		i++
	}

	return key
}
